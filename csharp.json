{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"[RATools] Achievement Function": {
		"prefix": "@achievement",
		"body": [
			"achievement(${1:title}, ${2:description}, ${3:points},",
			"            trigger = always_true())"
		],
		"description": "Defines a new achievement with the specified title (string), description (string), points (integer), and trigger."
	},

	"[RATools] Rich Presence Display": {
		"prefix": "@rpdisplay",
		"body": [
			"rich_presence_display(${1:format_string}, parameters...)"
		],
		"description": "Defines the rich presence display string. Only one string may be defined per script. If this function is called multiple times, the last one will win."
	},

	"[RATools] Rich Presence Value": {
		"prefix": "@rpvalue",
		"body": [
			"rich_presence_value(${1:name}, ${2:expression}, [format])"
		],
		"description": "Rich presence Value"
	},

	"[RATools] Rich Presence Lookup": {
		"prefix": "@rplookup",
		"body": [
			"rich_presence_lookup(${1:name}, ${2:expression}, ${3:dictionary}, [fallback])"
		],
		"description": "Rich presence Lookup"
	},

	"[RATools] Rich Presence Macro": {
		"prefix": "@rpvalue",
		"body": [
			"rich_presence_macro(${1:macro}, ${1:expression})"
		],
		"description": "Rich presence Macro"
	},

	"[RATools] Rich Presence Conditional Display": {
		"prefix": "@rpcondisplay",
		"body": [
			"rich_presence_conditional_display(${1:condition}, ${1:format_string}, parameters...)"
		],
		"description": "Defines a conditional rich presence display string. When executing the rich presence script, each condition is examined in order. If a condition is matched, that display string will be used. If no conditions are matched, the default display string will be used. You must still provide a default display string by calling rich_presence_display."
	},

	"[RATools] Leaderboard Function": {
		"prefix": "@leaderboard",
		"body": [
			"leaderboard(${1:title}, ${2:description},", 
			 "           start = ,",
			 "           cancel = ,",
			 "           submit = ,",
			 "           value = ,",
			 "           format = \"VALUE\", lower_is_better=false)"
		],
		"description": "Defines a leaderboard. title and description must be strings."
	},

	// Normal Functions
	"[RATools] Format (Built-in Functions)": {
		"prefix": "@format",
		"body": [
			"format(${1:format_string}, ${2:parameters...})"
		],
		"description": "Builds a string by inserting parameters into placeholders in the format_string."
	},

	"[RATools] Repeated (Trigger Function)": {
		"prefix": "@repeated",
		"body": [
			"repeated(${1:count}, ${2:comparison})"
		],
		"description": "Adds a Hit Target to the condition. The specified comparison must be true for count frames for the trigger to fire."
	},

	"[RATools] Tally (Trigger Function)": {
		"prefix": "@tally",
		"body": [
			"tally(${1:count}, ${2:comparisons}...)"
		],
		"description": "Adds a Hit Target to the condition where multiple conditions may be true in the same frame. comparison may be an array of conditions, or multiple conditions passed as individual parameters. Each condition that is true on each frame will tally a Hit Count."
	},

	"[RATools] Measured (Trigger Function)": {
		"prefix": "@measured",
		"body": [
			"measured(${1:comparison}, when=always_true(), format=\"raw\")"
		],
		"description": "This adds a Measured flag to the comparison. If the comparison is repeated, the Measured value will be the current number of hits on the condition, and the measurement target will be the Hit Target for the condition. Otherwise, the Measured value will be the left side value and the measurement target will be the right side value (regardless of the comparison operation)."
	},

	"[RATools] Disable When (Trigger Function)": {
		"prefix": "@disablewhen",
		"body": [
			"disable_when(${1:comparison}, until=always_false())"
		],
		"description": ["This adds a PauseIf flag and a hit target to the comparison. If comparison is not a repeated() condition, the hit target will be 1, otherwise the hit target will come from the repeated() function call. When the hit target is met, the runtime will disable the achievement indefinitely. This is most often used to disable achievements while a cheat is active.", 
		"If until is specified, it will generate a ResetNextIf condition attached to the PauseIf, which will clear the hit count when true, thereby re-enabling the achievement."]
	},

	"[RATools] For-In Loop": {
		"prefix": "@forin",
		"body": [
			"for ${1:key} in ${2:dictionary} {",
			"",
			"}"
		],
		"description": "Loops allow for a section of code to be repeated - usually once for each value in a collection or range."
	},

	// Memory Acessor
	"[RATools] 8-bit (Memory Accessor)": {
		"prefix": "@mem8bit",
		"body": [
			"byte(${1:address})"
		],
		"description": ""
	},

	"[RATools] 16-bit (Memory Accessor)": {
		"prefix": "@mem16bit",
		"body": [
			"word(${1:address})"
		],
		"description": ""
	},

	"[RATools] 24-bit (Memory Accessor)": {
		"prefix": "@mem24bit",
		"body": [
			"tbyte(${1:address})"
		],
		"description": ""
	},

	"[RATools] 32-bit (Memory Accessor)": {
		"prefix": "@mem32bit",
		"body": [
			"dword(${1:address})"
		],
		"description": ""
	},

	"[RATools] Bit0 (Memory Acessor)": {
		"prefix": "@b0",
		"body": [
			"bit0(${1:address})"
		],
		"description": ""
	},

	"[RATools] Bit1 (Memory Acessor)": {
		"prefix": "@b1",
		"body": [
			"bit1(${1:address})"
		],
		"description": ""
	},

	"[RATools] Bit2 (Memory Acessor)": {
		"prefix": "@b2",
		"body": [
			"bit2(${1:address})"
		],
		"description": ""
	},

	"[RATools] Bit3 (Memory Acessor)": {
		"prefix": "@b3",
		"body": [
			"bit3(${1:address})"
		],
		"description": ""
	},

	"[RATools] Bit4 (Memory Acessor)": {
		"prefix": "@b4",
		"body": [
			"bit4(${1:address})"
		],
		"description": ""
	},

	"[RATools] Bit5 (Memory Acessor)": {
		"prefix": "@b5",
		"body": [
			"bit5(${1:address})"
		],
		"description": ""
	},

	"[RATools] Bit6 (Memory Acessor)": {
		"prefix": "@b6",
		"body": [
			"bit6(${1:address})"
		],
		"description": ""
	},

	"[RATools] Bit7 (Memory Acessor)": {
		"prefix": "@b7",
		"body": [
			"bit7(${1:address})"
		],
		"description": ""
	},

	// Custom
	"[RATools] Mem > Delta (Logic Function)": {
		"prefix": "@mem>delta",
		"body": [
			"${1:mem_accessor}() > prev(${1:mem_accessor}())"
		],
		"description": ""
	},

	"[RATools] Mem < Delta (Logic Function)": {
		"prefix": "@mem<delta",
		"body": [
			"${1:mem_accessor}() < prev(${1:mem_accessor}())"
		],
		"description": ""
	},

	"[RATools] Delta Access (Logic Function)": {
		"prefix": "@delta",
		"body": [
			"prev(${1:mem_accessor})"
		],
		"description": "The value of the specified address from the previous frame"
	},

	"[RATools] Prior Access (Logic Function)": {
		"prefix": "@prior",
		"body": [
			"prior(${1:mem_accessor})"
		],
		"description": "The last differing value of the specified address"
	},

	"[RATools] BCD Access (Logic Function)": {
		"prefix": "@bcd",
		"body": [
			"bcd(${1:mem_accessor})"
		],
		"description": "Converts a BCD-encoded value to decimal for leaderboard and rich presence values."
	},

	"[RATools] Sum of Bits (Logic Function)": {
		"prefix": "@sum_of_bits",
		"body": [
			"sum_of(range(${1:min}, ${2:max}), b => bit(b,${3:address}))"
		],
		"description": "Returns the total amount of bits activated in the specified range and address."
	},

	"[Comments] Section Separator": {
		"prefix": "@section_title",
		"body": [
			"// =========================================",
			"//                  ${1:title}              ",
			"// ========================================="
		],
		"description": "Add comments to separate separate a file into sections, for better organization."
	},




	


	
}